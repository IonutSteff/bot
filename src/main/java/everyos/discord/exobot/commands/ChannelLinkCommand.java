package everyos.discord.exobot.commands;

import discord4j.core.object.entity.Message;
import everyos.discord.exobot.cases.ChatLinkChannelCaseData;
import everyos.discord.exobot.cases.ChannelCase.CASES;
import everyos.discord.exobot.objects.ChannelObject;
import everyos.discord.exobot.objects.GuildObject;
import everyos.discord.exobot.util.ChannelHelper;
import everyos.discord.exobot.util.ChannelIdentifierHelper;
import everyos.discord.exobot.util.GuildHelper;
import everyos.discord.exobot.util.StringUtil;
import everyos.discord.exobot.util.UserHelper;

public class ChannelLinkCommand implements ICommand {
    public ChannelLinkCommand() {}

    @Override public void execute(Message message, String argument) {
        GuildObject guild = GuildHelper.getGuildData(message.getGuild());
        ChannelObject channel = ChannelHelper.getChannelData(guild, message.getChannel().block());

        if (!UserHelper.getUserData(guild, message.getAuthorAsMember()).isOpted()) {
			channel.send("User is not opted to use this command", true); return;
        }
        
        String[] args = StringUtil.split(argument, " ");

        if (args.length<2) {
            channel.send("Expected two parameters!", true); return;
        }

        String guildID1; String guildID2;
        String channelID1; String channelID2;

        if (ChannelHelper.isChannelId(args[0])) {
            guildID1 = guild.id;
            channelID1 = ChannelHelper.parseChannelId(args[0]);
        } else if (ChannelIdentifierHelper.isIdentifier(args[0])) {
            guildID1 = ChannelIdentifierHelper.getGuildFromIdentifier(args[0]);
            channelID1 = ChannelIdentifierHelper.getChannelFromIdentifier(args[0]);
            if (!(guildID1.equals(guild.id))) {
                channel.send("First supplied channel must be within this Discord server!", true);
                return;
            }
        } else {
            channel.send("I don't recognize this channel id format!", true);
            return;
        }

        if (ChannelHelper.isChannelId(args[1])) {
            guildID2 = guild.id;
            channelID2 = ChannelHelper.parseChannelId(args[1]);
        } else if (ChannelIdentifierHelper.isIdentifier(args[1])) {
            guildID2 = ChannelIdentifierHelper.getGuildFromIdentifier(args[1]);
            channelID2 = ChannelIdentifierHelper.getChannelFromIdentifier(args[1]);
        } else {
            channel.send("I don't recognize this channel id format!", true); return;
        }

        ChannelObject channel1 = ChannelHelper.getChannelData(guild, channelID1);
        channel1.data = new ChatLinkChannelCaseData(guildID2, channelID2);
        channel1.CASE = CASES.CHATLINK;
        
        GuildObject guild2 = GuildHelper.getGuildData(guildID2);
        ChannelObject channel2 = ChannelHelper.getChannelData(guild2, channelID2);
        boolean done = true;
        if (!(channel2.data instanceof ChatLinkChannelCaseData)) done = false;
        ChatLinkChannelCaseData data2 = (ChatLinkChannelCaseData) channel2.data;
        if (!(done&&data2.guildPair.equals(guildID1)&&data2.channelPair.equals(channelID1))) done = false;
        if (!done) {
            if (guildID2.equals(guild.id)) {
                channel2.data = new ChatLinkChannelCaseData(guildID1, channelID1);
                channel2.CASE = CASES.CHATLINK;
                channel.send("Auto-configured other channel: Channels linked!", true);
                return;
            }
            channel.send("Please finish configuration by running `"+
                guild2.prefix+"chatlink "+guildID2+"-"+channelID2+" "+guildID1+"-"+channelID1+
                "` in the target server", true);
            return;
        } else {
            channel.send("Channels linked!", true);
            return;
        }
    }

    @Override public String getHelp() {
        return "<channel1>[channel2/identifier2] Links two channels, or clears a link.";
    }

    @Override public String getFullHelp() {
        return "<channel1><channel2/identifier2> The channels to link\n"+
            "<channel1/identifier1> Unlinks channels\n"+
            "If linking across guilds, please use a channel identifier generated by *identifier";
    }

    @Override public COMMANDS getType() {
        return null;
    }
}